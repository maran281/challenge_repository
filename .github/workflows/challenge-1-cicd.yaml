name: "Deploy my challenge 1"

on:
    push:
        branches:
            - dev
            - test
        paths: 
            - 'challenge-1-cicd/**'

jobs:
    deployment-in-dev-env:
        runs-on: ubuntu-latest
        permissions: 
            contents: 'read'
            id-token: 'write'

        outputs:
          wif_provider: ${{steps.setting_var.outputs.w_provider}}
          service_acc: ${{steps.setting_var.outputs.s_account}}
          terra_path: ${{steps.setting_var.outputs.t_path}}
          projectid: ${{steps.setting_var.outputs.p_id}}
          source_code_bucket: ${{steps.setting_var.outputs.sc_bucket}}
          source_bucket: ${{steps.setting_var.outputs.s_bucket}}
          target_bucket: ${{steps.setting_var.outputs.t_bucket}}

        steps:
            - name: set variables for the workflow
              id: setting_var
              run: |
                if "${{github.event.ref}}" == 'refs/heads/dev'
                then
                  echo "::set-output name=s_account::${{secrets.service_account_dev_project}}"
                  echo "::set-output name=p_id::${{secrets.PROJECTID_DEV}}"
                  echo "::set-output name=sc_bucket::${{secrets.SOURCE_CODE_BUCKET_DEV}}"
                  echo "::set-output name=s_bucket::${{secrets.SOURCE_BUCKET_DEV}}"
                  echo "::set-output name=t_bucket::${{secrets.TARGET_BUCKET_DEV}}"
                else
                  echo "::set-output name=s_account::${{secrets.service_account_test_project}}"
                  echo "::set-output name=p_id::${{secrets.PROJECTID_TEST}}"
                  echo "::set-output name=sc_bucket::${{secrets.SOURCE_CODE_BUCKET_TEST}}"
                  echo "::set-output name=s_bucket::${{secrets.SOURCE_BUCKET_TEST}}"
                  echo "::set-output name=t_bucket::${{secrets.TARGET_BUCKET_TEST}}"
                fi

            - name: checkout my code from test branch
              uses: actions/checkout@v3

            - id: 'auth'
              if: github.event.ref == 'refs/heads/dev'
              name: 'Authenticate to GCP DEV project'
              uses: 'google-github-actions/auth@v1'
              with:
                  token_format: 'access_token'
                  workload_identity_provider: ${{secrets.workload_identity_provider_dev_project}}
                    #'projects/432600233474/locations/global/workloadIdentityPools/mypoolid-devproject-1/providers/myproviderid-devproject-1'
                  service_account: ${{secrets.service_account_dev_project}}
                    #sa-dev-4-challenge-1-cicd@dev-project-406720.iam.gserviceaccount.com

            - id: 'auth2'
              if: github.event.ref == 'refs/heads/test'
              name: 'Authenticate to GCP DEV project'
              uses: 'google-github-actions/auth@v1'
              with:
                  token_format: 'access_token'
                  workload_identity_provider: ${{secrets.workload_identity_provider_test_project}}
                    #'projects/432600233474/locations/global/workloadIdentityPools/mypoolid-devproject-1/providers/myproviderid-devproject-1'
                  service_account: ${{secrets.service_account_test_project}}
                    #sa-dev-4-challenge-1-cicd@dev-project-406720.iam.gserviceaccount.com

            - name: 'Initializing terraform'
              if: github.event.ref == 'refs/heads/dev'
              run: |
                cd $GITHUB_WORKSPACE/challenge-1-cicd/terraform/terraform_dev
                echo "value of projectid is: ${{steps.setting_var.outputs.service_acc}}"
                terraform init
                terraform apply -auto-approve
              env:
                TF_VAR_sa: ${{steps.setting_var.outputs.service_acc}} 
                #"sa-dev-4-challenge-1-cicd@dev-project-406720.iam.gserviceaccount.com"
                status_val: "fail"
                TF_VAR_projectid: ${{needs.deployment-in-dev-env.outputs.projectid}} 
                #"dev-project-406720"
                TF_VAR_terraform_bucket: ${{needs.deployment-in-dev-env.outputs.service_acc}} 
                #"tf_statebucket_4_challenge-1-cicd"
                TF_VAR_source_code_bucket: ${{needs.deployment-in-dev-env.outputs.source_code_bucket}} 
                #"cf_source_code_4_challenge"
                TF_VAR_source_bucket: ${{needs.deployment-in-dev-env.outputs.source_bucket}} 
                #"cf_source_bucket_4_challenge-1-cicd"
                TF_VAR_target_bucket: ${{needs.deployment-in-dev-env.outputs.target_bucket}} 
                #"cf_target_bucket_4_challenge-1-cicd"

    verify-deployment-in-dev-env:
        runs-on: ubuntu-latest

        #below step produces an output of this job.
        #output result will be stored inside myoutput.
        #value of myoutput will be fetched from 
        #steps.<stepid where outout is generated>.outputs.<variable which is generating output>
        outputs:
          myoutput: ${{steps.verify-deployment-in-dev-env.outputs.status_val}}

        needs: deployment-in-dev-env
        if: success()

        permissions: 
          contents: 'read'
          id-token: 'write'

        steps:
          - name: checkout my code
            if: github.event.ref == 'refs/heads/dev'
            uses: actions/checkout@v3

          - id: 'auth'
            if: github.event.ref == 'refs/heads/dev'
            name: 'Authenticate to GCP DEV project'
            uses: 'google-github-actions/auth@v1'
            with:
              token_format: 'access_token'
              workload_identity_provider: ${{secrets.workload_identity_provider_dev_project}}
                #'projects/432600233474/locations/global/workloadIdentityPools/mypoolid-devproject-1/providers/myproviderid-devproject-1'
              service_account: ${{secrets.service_account_dev_project}}
                #sa-dev-4-challenge-1-cicd@dev-project-406720.iam.gserviceaccount.com

          - name: 'setup my cloud SDK'
            if: github.event.ref == 'refs/heads/dev'
            uses: 'google-github-actions/setup-gcloud@v1'

          - name: 'test the deployed cloud function'
            if: github.event.ref == 'refs/heads/dev'
            run: |
              gsutil cp $GITHUB_WORKSPACE/challenge-1-cicd/testing/testFile.txt gs://cf_source_bucket_4_challenge-1-cicd/test_file1_trigger.txt

          - name: 'validate the testing'
            if: github.event.ref == 'refs/heads/dev'
            id: 'verify-deployment-in-dev-env'
            run: |
              if gsutil stat gs://cf_target_bucket_4_challenge-1-cicd/processed_file.txt 
              then
                echo "status_val=pass" >> $GITHUB_OUTPUT
                echo ""github_output variable is : ${GITHUB_OUTPUT}
                echo "File exist"
              else
                echo "status_val=fail" >> $GITHUB_OUTPUT
                echo "Testing failed as the file doesn't exist in the target folder. Existing the workflow"
              fi

#Below job is created to merge the code in another branch if previous job is successfull
    code-merge-in-prod-env:
      runs-on: ubuntu-latest
      needs: verify-deployment-in-dev-env

      steps:
        - name: setup GIT
          if: ${{(github.event.ref == 'refs/heads/dev') && ( needs.verify-deployment-in-dev-env.outputs.myoutput == 'pass')}}
          run: |
            echo "value of the variable is ${{ needs.verify-deployment-in-dev-env.outputs.myoutput }}"
            git init
            git config --global user.name "maran281"
            git config --global user.email "berserker.syco@gmail.com"
            git clone -b dev https://maran2814:${{ secrets.challenge_repo_github_token }}@github.com/maran281/challenge_repository.git
            cd challenge_repository
            git checkout test
            git merge dev
            git push origin test